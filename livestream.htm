<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta charset='utf-8' />
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<title>Live Video - Blue Iris</title>
	<script type="text/javascript">
		var local_bi_session = "%%SESSION%%";
		var local_bi_session_arg = navigator.cookieEnabled ? "" : "&session=" + local_bi_session;
		var bi_version = "%%VERSION%%";
		var badsession = !local_bi_session || (local_bi_session.length === 11 && local_bi_session.startsWith("%") && local_bi_session.endsWith("%") && local_bi_session.indexOf("SESSION") === 2);
		var UrlParameters =
		{
			loaded: false,
			parsed_url_params: {},
			Get: function (key)
			{
				if (!this.loaded)
				{
					var params = this.parsed_url_params;
					window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (str, key, value) { params[key.toLowerCase()] = decodeURIComponent(value); });
					this.loaded = true;
				}
				if (typeof this.parsed_url_params[key.toLowerCase()] !== 'undefined')
					return this.parsed_url_params[key.toLowerCase()];
				return "";
			}
		};
		function onResize()
		{
			var dataplayer = getElementWithAttribute("data-player");
			if (dataplayer !== null)
			{
				dataplayer.style.width = window.innerWidth + "px";
				dataplayer.style.height = window.innerHeight + "px";
			}
		}
		function getElementWithAttribute(attribute)
		{
			var allElements = document.getElementsByTagName('*');
			for (var i = 0, n = allElements.length; i < n; i++)
				if (allElements[i].getAttribute(attribute) !== null)
					return allElements[i];
			return null;
		}
		function onStreamingError(obj)
		{
			var description = "Unknown";
			try
			{
				var code = obj.raw.response.code;
				if (code === 503)
					description = "Unable to load stream with this camera name.";
				else if (code === 403)
				{
					description = "Session Lost";
					location.reload();
					return;
				}
				else
					description = obj.description;
			}
			catch (ex)
			{
			}
			ShowErrorMessage("Video player reports error: " + description);
		}
		function ShowErrorMessage(message)
		{
			console.log(message);
			var errorDiv = document.createElement("div");
			errorDiv.style.position = "absolute";
			errorDiv.style.top = "10px";
			errorDiv.style.left = "10px";
			errorDiv.style.width = "350px";
			errorDiv.style.height = "100px";
			errorDiv.style.borderStyle = "solid";
			errorDiv.style.borderWidth = "3px";
			errorDiv.style.borderRadius = "5px";
			errorDiv.style.borderColor = "#FF0000";
			errorDiv.style.backgroundColor = "#FFFFFF";
			errorDiv.style.padding = "10px";
			errorDiv.style.color = "#000000";
			errorDiv.innerHTML = message;
			errorDiv.id = "errordiv";
			errorDiv.onclick = function ()
			{
				errorDiv.remove();
			};
			document.body.appendChild(errorDiv);
		}
		/**
		 * Changes the current URL by removing the specified query string parameter(s) from it.
		 * @returns {String} Returns null if successful, otherwise returns the new URL if changing the history state failed.
		 */
		function NavRemoveUrlParams()
		{
			var url = RemoveUrlParams.apply(this, arguments);
			try { history.replaceState(history.state, "", url); return null; } catch (ex) { return url; }
		}
		function RemoveUrlParams()
		{
			var s = location.search;
			for (var i = 0; i < arguments.length; i++)
			{
				var param = arguments[i];
				var rx = new RegExp('(&|\\?)' + param + '=[^&?#%]+', 'gi');
				s = s.replace(rx, "");
				while (s.indexOf("&") === 0)
				{
					if (s.length > 1)
						s = s.substr(1);
					else
						s = "";
				}
				if (s.length > 0 && s.indexOf("?") === -1)
					s = "?" + s;
			}
			return location.origin + location.pathname + s + location.hash;
		}
		window.onresize = onResize;
		if (badsession)
		{
			alert("This page can only be loaded from the Blue Iris web server and requires Blue Iris 4.8.2.3 or newer");
		}
		else
		{
			if (navigator.cookieEnabled)
				NavRemoveUrlParams("session");
			document.write('<script src="clappr/clappr.min.js?v=' + bi_version + local_bi_session_arg + '"><\/script>');
		}
		function getHiddenProp()
		{
			var prefixes = ['webkit', 'moz', 'ms', 'o'];

			// if 'hidden' is natively supported just return it
			if ('hidden' in document) return 'hidden';

			// otherwise loop over all the known prefixes until we find one
			for (var i = 0; i < prefixes.length; i++)
			{
				if ((prefixes[i] + 'Hidden') in document)
					return prefixes[i] + 'Hidden';
			}

			// otherwise it's not supported
			return null;
		}
		function documentIsHidden()
		{
			var prop = getHiddenProp();
			if (!prop) return false;

			return document[prop];
		}
	</script>
	<style type="text/css">
		body
		{
			background-color: Black;
			margin: 0px;
			overflow: hidden;
		}
	</style>
</head>
<body>
	<div>
		<div id="player"></div>
	</div>
	<script type="text/javascript">
		console.log("=========================================================================");
		console.log("Welcome to livestream.htm");
		console.log("Supported URL parameters:");
		console.log("* cam=short     -- Select camera or group with [short] name");
		console.log("* autoplay=0    -- Disables autoplay.");
		console.log("* audio=1       -- Unmute at startup. Also disables autoplay.");
		console.log("* mode=2        -- Hide video player controls");
		console.log("* mode=3        -- Use browser's standard video player controls");
		console.log("=========================================================================");

		function SetPlayerState()
		{
			var visibleNow = !documentIsHidden();
			console.log("Tab is " + (visibleNow ? "visible" : "hidden"));
			if (player)
			{
				if (visibleNow)
				{
					player.play();
					player.seek(player.getDuration());
				}
				else
					player.stop();
			}
		}
		var visProp = getHiddenProp();
		if (visProp)
		{
			var evtname = visProp.replace(/[H|h]idden/, '') + 'visibilitychange';
			document.addEventListener(evtname, function ()
			{
				// Called when page visibility changes.
				SetPlayerState();
			});
		}
		if (!badsession)
		{
			var camId = (UrlParameters.Get("cam") === "" ? "index" : UrlParameters.Get("cam"));
			var src = "/h264/" + camId + "/temp.m3u8?session=" + local_bi_session;
			var mode = parseInt(UrlParameters.Get("mode"));
			var autoplay = UrlParameters.Get("autoplay");
			autoplay = autoplay !== "0" && autoplay.toUpperCase() !== "FALSE";
			var audio = UrlParameters.Get("audio");
			audio = audio === "1" || audio.toUpperCase() === "TRUE";
			if (audio)
				autoplay = false;
			var args = { source: src, parentId: "#player", autoPlay: false, mute: !audio, chromeless: false, disableVideoTagContextMenu: true, allowUserInteraction: true, actualLiveTime: true, hlsMinimumDvrSize: 1 };
			if (mode === 2 || mode === 3)
			{
				args.chromeless = true;
				args.disableVideoTagContextMenu = false;
			}
			var player = new Clappr.Player(args);
			player.on('playererror', onStreamingError);
			player.on('fullscreen', function () { setTimeout(onResize, 0); setTimeout(onResize, 100); });
			player.on('ready', function ()
			{
				setTimeout(function ()
				{
					onResize();
				}, 0);
			});
			if (autoplay)
				SetPlayerState();
			onResize();
			if (mode === 3)
			{
				var ele = document.getElementById("player");
				if (ele.querySelector)
					ele.querySelector("video").setAttribute("controls", "controls");
			}
		}
	</script>
</body>
</html>
